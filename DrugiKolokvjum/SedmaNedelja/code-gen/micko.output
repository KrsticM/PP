Grammar

    0 $accept: program $end

    1 program: global_var_list function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 $@2: %empty

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body

    7 type: _TYPE

    8 parameter: %empty
    9          | type _ID

   10 $@3: %empty

   11 body: _LBRACKET variable_list $@3 statement_list _RBRACKET

   12 global_var_list: %empty
   13                | global_var_list global_var

   14 global_var: type _ID _SEMICOLON

   15 variable_list: %empty
   16              | variable_list variable

   17 variable: type _ID _SEMICOLON

   18 statement_list: %empty
   19               | statement_list statement

   20 statement: compound_statement
   21          | assignment_statement
   22          | if_statement
   23          | return_statement
   24          | inc_statement

   25 inc_statement: _ID _INC _SEMICOLON

   26 compound_statement: _LBRACKET statement_list _RBRACKET

   27 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   28 num_exp: exp
   29        | num_exp _AROP exp

   30 exp: literal
   31    | _ID
   32    | function_call
   33    | _LPAREN num_exp _RPAREN

   34 literal: _INT_NUMBER
   35        | _UINT_NUMBER

   36 $@4: %empty

   37 function_call: _ID $@4 _LPAREN argument _RPAREN

   38 argument: %empty
   39         | num_exp

   40 if_statement: if_part
   41             | if_part _ELSE statement

   42 @5: %empty

   43 $@6: %empty

   44 if_part: _IF _LPAREN @5 rel_exp $@6 _RPAREN statement

   45 rel_exp: num_exp _RELOP num_exp

   46 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 7
_IF (259) 44
_ELSE (260) 41
_RETURN (261) 46
_ID (262) 6 9 14 17 25 27 31 37
_INT_NUMBER (263) 34
_UINT_NUMBER (264) 35
_LPAREN (265) 6 33 37 44
_RPAREN (266) 6 33 37 44
_LBRACKET (267) 11 26
_RBRACKET (268) 11 26
_ASSIGN (269) 27
_SEMICOLON (270) 14 17 25 27 46
_AROP (271) 29
_RELOP (272) 45
_INC (273) 25
ONLY_IF (274)


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
program (21)
    on left: 1, on right: 0
function_list (22)
    on left: 2 3, on right: 1 3
function (23)
    on left: 6, on right: 2 3
$@1 (24)
    on left: 4, on right: 6
$@2 (25)
    on left: 5, on right: 6
type (26)
    on left: 7, on right: 6 9 14 17
parameter (27)
    on left: 8 9, on right: 6
body (28)
    on left: 11, on right: 6
$@3 (29)
    on left: 10, on right: 11
global_var_list (30)
    on left: 12 13, on right: 1 13
global_var (31)
    on left: 14, on right: 13
variable_list (32)
    on left: 15 16, on right: 11 16
variable (33)
    on left: 17, on right: 16
statement_list (34)
    on left: 18 19, on right: 11 19 26
statement (35)
    on left: 20 21 22 23 24, on right: 19 41 44
inc_statement (36)
    on left: 25, on right: 24
compound_statement (37)
    on left: 26, on right: 20
assignment_statement (38)
    on left: 27, on right: 21
num_exp (39)
    on left: 28 29, on right: 27 29 33 39 45 46
exp (40)
    on left: 30 31 32 33, on right: 28 29
literal (41)
    on left: 34 35, on right: 30
function_call (42)
    on left: 37, on right: 32
$@4 (43)
    on left: 36, on right: 37
argument (44)
    on left: 38 39, on right: 37
if_statement (45)
    on left: 40 41, on right: 22
if_part (46)
    on left: 44, on right: 40 41
@5 (47)
    on left: 42, on right: 44
$@6 (48)
    on left: 43, on right: 44
rel_exp (49)
    on left: 45, on right: 44
return_statement (50)
    on left: 46, on right: 23


State 0

    0 $accept: . program $end

    $default  reduce using rule 12 (global_var_list)

    program          go to state 1
    global_var_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: global_var_list . function_list
   13 global_var_list: global_var_list . global_var

    _TYPE  shift, and go to state 4

    function_list  go to state 5
    function       go to state 6
    type           go to state 7
    global_var     go to state 8


State 3

    0 $accept: program $end .

    $default  accept


State 4

    7 type: _TYPE .

    $default  reduce using rule 7 (type)


State 5

    1 program: global_var_list function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 4

    $default  reduce using rule 1 (program)

    function  go to state 9
    type      go to state 10


State 6

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 7

    6 function: type . _ID $@1 _LPAREN parameter _RPAREN $@2 body
   14 global_var: type . _ID _SEMICOLON

    _ID  shift, and go to state 11


State 8

   13 global_var_list: global_var_list global_var .

    $default  reduce using rule 13 (global_var_list)


State 9

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 10

    6 function: type . _ID $@1 _LPAREN parameter _RPAREN $@2 body

    _ID  shift, and go to state 12


State 11

    6 function: type _ID . $@1 _LPAREN parameter _RPAREN $@2 body
   14 global_var: type _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 13

    $default  reduce using rule 4 ($@1)

    $@1  go to state 14


State 12

    6 function: type _ID . $@1 _LPAREN parameter _RPAREN $@2 body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 14


State 13

   14 global_var: type _ID _SEMICOLON .

    $default  reduce using rule 14 (global_var)


State 14

    6 function: type _ID $@1 . _LPAREN parameter _RPAREN $@2 body

    _LPAREN  shift, and go to state 15


State 15

    6 function: type _ID $@1 _LPAREN . parameter _RPAREN $@2 body

    _TYPE  shift, and go to state 4

    $default  reduce using rule 8 (parameter)

    type       go to state 16
    parameter  go to state 17


State 16

    9 parameter: type . _ID

    _ID  shift, and go to state 18


State 17

    6 function: type _ID $@1 _LPAREN parameter . _RPAREN $@2 body

    _RPAREN  shift, and go to state 19


State 18

    9 parameter: type _ID .

    $default  reduce using rule 9 (parameter)


State 19

    6 function: type _ID $@1 _LPAREN parameter _RPAREN . $@2 body

    $default  reduce using rule 5 ($@2)

    $@2  go to state 20


State 20

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 . body

    _LBRACKET  shift, and go to state 21

    body  go to state 22


State 21

   11 body: _LBRACKET . variable_list $@3 statement_list _RBRACKET

    $default  reduce using rule 15 (variable_list)

    variable_list  go to state 23


State 22

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body .

    $default  reduce using rule 6 (function)


State 23

   11 body: _LBRACKET variable_list . $@3 statement_list _RBRACKET
   16 variable_list: variable_list . variable

    _TYPE  shift, and go to state 4

    $default  reduce using rule 10 ($@3)

    type      go to state 24
    $@3       go to state 25
    variable  go to state 26


State 24

   17 variable: type . _ID _SEMICOLON

    _ID  shift, and go to state 27


State 25

   11 body: _LBRACKET variable_list $@3 . statement_list _RBRACKET

    $default  reduce using rule 18 (statement_list)

    statement_list  go to state 28


State 26

   16 variable_list: variable_list variable .

    $default  reduce using rule 16 (variable_list)


State 27

   17 variable: type _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 29


State 28

   11 body: _LBRACKET variable_list $@3 statement_list . _RBRACKET
   19 statement_list: statement_list . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _RBRACKET  shift, and go to state 34

    statement             go to state 35
    inc_statement         go to state 36
    compound_statement    go to state 37
    assignment_statement  go to state 38
    if_statement          go to state 39
    if_part               go to state 40
    return_statement      go to state 41


State 29

   17 variable: type _ID _SEMICOLON .

    $default  reduce using rule 17 (variable)


State 30

   44 if_part: _IF . _LPAREN @5 rel_exp $@6 _RPAREN statement

    _LPAREN  shift, and go to state 42


State 31

   46 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    num_exp        go to state 47
    exp            go to state 48
    literal        go to state 49
    function_call  go to state 50


State 32

   25 inc_statement: _ID . _INC _SEMICOLON
   27 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 51
    _INC     shift, and go to state 52


State 33

   26 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 18 (statement_list)

    statement_list  go to state 53


State 34

   11 body: _LBRACKET variable_list $@3 statement_list _RBRACKET .

    $default  reduce using rule 11 (body)


State 35

   19 statement_list: statement_list statement .

    $default  reduce using rule 19 (statement_list)


State 36

   24 statement: inc_statement .

    $default  reduce using rule 24 (statement)


State 37

   20 statement: compound_statement .

    $default  reduce using rule 20 (statement)


State 38

   21 statement: assignment_statement .

    $default  reduce using rule 21 (statement)


State 39

   22 statement: if_statement .

    $default  reduce using rule 22 (statement)


State 40

   40 if_statement: if_part .
   41             | if_part . _ELSE statement

    _ELSE  shift, and go to state 54

    $default  reduce using rule 40 (if_statement)


State 41

   23 statement: return_statement .

    $default  reduce using rule 23 (statement)


State 42

   44 if_part: _IF _LPAREN . @5 rel_exp $@6 _RPAREN statement

    $default  reduce using rule 42 (@5)

    @5  go to state 55


State 43

   31 exp: _ID .
   37 function_call: _ID . $@4 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 36 ($@4)
    $default  reduce using rule 31 (exp)

    $@4  go to state 56


State 44

   34 literal: _INT_NUMBER .

    $default  reduce using rule 34 (literal)


State 45

   35 literal: _UINT_NUMBER .

    $default  reduce using rule 35 (literal)


State 46

   33 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    num_exp        go to state 57
    exp            go to state 48
    literal        go to state 49
    function_call  go to state 50


State 47

   29 num_exp: num_exp . _AROP exp
   46 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 58
    _AROP       shift, and go to state 59


State 48

   28 num_exp: exp .

    $default  reduce using rule 28 (num_exp)


State 49

   30 exp: literal .

    $default  reduce using rule 30 (exp)


State 50

   32 exp: function_call .

    $default  reduce using rule 32 (exp)


State 51

   27 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    num_exp        go to state 60
    exp            go to state 48
    literal        go to state 49
    function_call  go to state 50


State 52

   25 inc_statement: _ID _INC . _SEMICOLON

    _SEMICOLON  shift, and go to state 61


State 53

   19 statement_list: statement_list . statement
   26 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _RBRACKET  shift, and go to state 62

    statement             go to state 35
    inc_statement         go to state 36
    compound_statement    go to state 37
    assignment_statement  go to state 38
    if_statement          go to state 39
    if_part               go to state 40
    return_statement      go to state 41


State 54

   41 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33

    statement             go to state 63
    inc_statement         go to state 36
    compound_statement    go to state 37
    assignment_statement  go to state 38
    if_statement          go to state 39
    if_part               go to state 40
    return_statement      go to state 41


State 55

   44 if_part: _IF _LPAREN @5 . rel_exp $@6 _RPAREN statement

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    num_exp        go to state 64
    exp            go to state 48
    literal        go to state 49
    function_call  go to state 50
    rel_exp        go to state 65


State 56

   37 function_call: _ID $@4 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 66


State 57

   29 num_exp: num_exp . _AROP exp
   33 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 67
    _AROP    shift, and go to state 59


State 58

   46 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 46 (return_statement)


State 59

   29 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    exp            go to state 68
    literal        go to state 49
    function_call  go to state 50


State 60

   27 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   29 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 69
    _AROP       shift, and go to state 59


State 61

   25 inc_statement: _ID _INC _SEMICOLON .

    $default  reduce using rule 25 (inc_statement)


State 62

   26 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 26 (compound_statement)


State 63

   41 if_statement: if_part _ELSE statement .

    $default  reduce using rule 41 (if_statement)


State 64

   29 num_exp: num_exp . _AROP exp
   45 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 59
    _RELOP  shift, and go to state 70


State 65

   44 if_part: _IF _LPAREN @5 rel_exp . $@6 _RPAREN statement

    $default  reduce using rule 43 ($@6)

    $@6  go to state 71


State 66

   37 function_call: _ID $@4 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    $default  reduce using rule 38 (argument)

    num_exp        go to state 72
    exp            go to state 48
    literal        go to state 49
    function_call  go to state 50
    argument       go to state 73


State 67

   33 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 33 (exp)


State 68

   29 num_exp: num_exp _AROP exp .

    $default  reduce using rule 29 (num_exp)


State 69

   27 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 27 (assignment_statement)


State 70

   45 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 43
    _INT_NUMBER   shift, and go to state 44
    _UINT_NUMBER  shift, and go to state 45
    _LPAREN       shift, and go to state 46

    num_exp        go to state 74
    exp            go to state 48
    literal        go to state 49
    function_call  go to state 50


State 71

   44 if_part: _IF _LPAREN @5 rel_exp $@6 . _RPAREN statement

    _RPAREN  shift, and go to state 75


State 72

   29 num_exp: num_exp . _AROP exp
   39 argument: num_exp .

    _AROP  shift, and go to state 59

    $default  reduce using rule 39 (argument)


State 73

   37 function_call: _ID $@4 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 76


State 74

   29 num_exp: num_exp . _AROP exp
   45 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 59

    $default  reduce using rule 45 (rel_exp)


State 75

   44 if_part: _IF _LPAREN @5 rel_exp $@6 _RPAREN . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33

    statement             go to state 77
    inc_statement         go to state 36
    compound_statement    go to state 37
    assignment_statement  go to state 38
    if_statement          go to state 39
    if_part               go to state 40
    return_statement      go to state 41


State 76

   37 function_call: _ID $@4 _LPAREN argument _RPAREN .

    $default  reduce using rule 37 (function_call)


State 77

   44 if_part: _IF _LPAREN @5 rel_exp $@6 _RPAREN statement .

    $default  reduce using rule 44 (if_part)
