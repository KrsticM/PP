Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 $@2: %empty

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body

    7 type: _TYPE

    8 parameter: %empty
    9          | type _ID

   10 $@3: %empty

   11 body: _LBRACKET variable_list $@3 statement_list _RBRACKET

   12 variable_list: %empty
   13              | variable_list variable

   14 variable: type _ID _SEMICOLON

   15 statement_list: %empty
   16               | statement_list statement

   17 statement: compound_statement
   18          | assignment_statement
   19          | if_statement
   20          | return_statement
   21          | for_statement

   22 compound_statement: _LBRACKET statement_list _RBRACKET

   23 @4: %empty

   24 $@5: %empty

   25 $@6: %empty

   26 $@7: %empty

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement

   28 steping: %empty
   29        | _STEP literal

   30 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   31 num_exp: exp
   32        | num_exp _AROP exp

   33 exp: literal
   34    | _ID
   35    | function_call
   36    | _LPAREN num_exp _RPAREN

   37 literal: _INT_NUMBER
   38        | _UINT_NUMBER

   39 $@8: %empty

   40 function_call: _ID $@8 _LPAREN argument _RPAREN

   41 argument: %empty
   42         | num_exp

   43 if_statement: if_part
   44             | if_part _ELSE statement

   45 @9: %empty

   46 $@10: %empty

   47 if_part: _IF _LPAREN @9 rel_exp $@10 _RPAREN statement

   48 rel_exp: num_exp _RELOP num_exp

   49 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 7
_IF (259) 47
_ELSE (260) 44
_RETURN (261) 49
_ID (262) 6 9 14 27 30 34 40
_INT_NUMBER (263) 37
_UINT_NUMBER (264) 38
_LPAREN (265) 6 27 36 40 47
_RPAREN (266) 6 27 36 40 47
_LBRACKET (267) 11 22
_RBRACKET (268) 11 22
_ASSIGN (269) 27 30
_SEMICOLON (270) 14 30 49
_AROP (271) 32
_RELOP (272) 48
ONLY_IF (273)
_FOR (274) 27
_TO (275) 27
_STEP (276) 29


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
program (23)
    on left: 1, on right: 0
function_list (24)
    on left: 2 3, on right: 1 3
function (25)
    on left: 6, on right: 2 3
$@1 (26)
    on left: 4, on right: 6
$@2 (27)
    on left: 5, on right: 6
type (28)
    on left: 7, on right: 6 9 14
parameter (29)
    on left: 8 9, on right: 6
body (30)
    on left: 11, on right: 6
$@3 (31)
    on left: 10, on right: 11
variable_list (32)
    on left: 12 13, on right: 11 13
variable (33)
    on left: 14, on right: 13
statement_list (34)
    on left: 15 16, on right: 11 16 22
statement (35)
    on left: 17 18 19 20 21, on right: 16 27 44 47
compound_statement (36)
    on left: 22, on right: 17
for_statement (37)
    on left: 27, on right: 21
@4 (38)
    on left: 23, on right: 27
$@5 (39)
    on left: 24, on right: 27
$@6 (40)
    on left: 25, on right: 27
$@7 (41)
    on left: 26, on right: 27
steping (42)
    on left: 28 29, on right: 27
assignment_statement (43)
    on left: 30, on right: 18
num_exp (44)
    on left: 31 32, on right: 30 32 36 42 48 49
exp (45)
    on left: 33 34 35 36, on right: 31 32
literal (46)
    on left: 37 38, on right: 27 29 33
function_call (47)
    on left: 40, on right: 35
$@8 (48)
    on left: 39, on right: 40
argument (49)
    on left: 41 42, on right: 40
if_statement (50)
    on left: 43 44, on right: 19
if_part (51)
    on left: 47, on right: 43 44
@9 (52)
    on left: 45, on right: 47
$@10 (53)
    on left: 46, on right: 47
rel_exp (54)
    on left: 48, on right: 47
return_statement (55)
    on left: 49, on right: 20


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4
    type           go to state 5


State 1

    7 type: _TYPE .

    $default  reduce using rule 7 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7
    type      go to state 5


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    6 function: type . _ID $@1 _LPAREN parameter _RPAREN $@2 body

    _ID  shift, and go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    6 function: type _ID . $@1 _LPAREN parameter _RPAREN $@2 body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 9


State 9

    6 function: type _ID $@1 . _LPAREN parameter _RPAREN $@2 body

    _LPAREN  shift, and go to state 10


State 10

    6 function: type _ID $@1 _LPAREN . parameter _RPAREN $@2 body

    _TYPE  shift, and go to state 1

    $default  reduce using rule 8 (parameter)

    type       go to state 11
    parameter  go to state 12


State 11

    9 parameter: type . _ID

    _ID  shift, and go to state 13


State 12

    6 function: type _ID $@1 _LPAREN parameter . _RPAREN $@2 body

    _RPAREN  shift, and go to state 14


State 13

    9 parameter: type _ID .

    $default  reduce using rule 9 (parameter)


State 14

    6 function: type _ID $@1 _LPAREN parameter _RPAREN . $@2 body

    $default  reduce using rule 5 ($@2)

    $@2  go to state 15


State 15

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 . body

    _LBRACKET  shift, and go to state 16

    body  go to state 17


State 16

   11 body: _LBRACKET . variable_list $@3 statement_list _RBRACKET

    $default  reduce using rule 12 (variable_list)

    variable_list  go to state 18


State 17

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body .

    $default  reduce using rule 6 (function)


State 18

   11 body: _LBRACKET variable_list . $@3 statement_list _RBRACKET
   13 variable_list: variable_list . variable

    _TYPE  shift, and go to state 1

    $default  reduce using rule 10 ($@3)

    type      go to state 19
    $@3       go to state 20
    variable  go to state 21


State 19

   14 variable: type . _ID _SEMICOLON

    _ID  shift, and go to state 22


State 20

   11 body: _LBRACKET variable_list $@3 . statement_list _RBRACKET

    $default  reduce using rule 15 (statement_list)

    statement_list  go to state 23


State 21

   13 variable_list: variable_list variable .

    $default  reduce using rule 13 (variable_list)


State 22

   14 variable: type _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 24


State 23

   11 body: _LBRACKET variable_list $@3 statement_list . _RBRACKET
   16 statement_list: statement_list . statement

    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _RBRACKET  shift, and go to state 29
    _FOR       shift, and go to state 30

    statement             go to state 31
    compound_statement    go to state 32
    for_statement         go to state 33
    assignment_statement  go to state 34
    if_statement          go to state 35
    if_part               go to state 36
    return_statement      go to state 37


State 24

   14 variable: type _ID _SEMICOLON .

    $default  reduce using rule 14 (variable)


State 25

   47 if_part: _IF . _LPAREN @9 rel_exp $@10 _RPAREN statement

    _LPAREN  shift, and go to state 38


State 26

   49 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    num_exp        go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46


State 27

   30 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 47


State 28

   22 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 15 (statement_list)

    statement_list  go to state 48


State 29

   11 body: _LBRACKET variable_list $@3 statement_list _RBRACKET .

    $default  reduce using rule 11 (body)


State 30

   27 for_statement: _FOR . _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement

    _LPAREN  shift, and go to state 49


State 31

   16 statement_list: statement_list statement .

    $default  reduce using rule 16 (statement_list)


State 32

   17 statement: compound_statement .

    $default  reduce using rule 17 (statement)


State 33

   21 statement: for_statement .

    $default  reduce using rule 21 (statement)


State 34

   18 statement: assignment_statement .

    $default  reduce using rule 18 (statement)


State 35

   19 statement: if_statement .

    $default  reduce using rule 19 (statement)


State 36

   43 if_statement: if_part .
   44             | if_part . _ELSE statement

    _ELSE  shift, and go to state 50

    $default  reduce using rule 43 (if_statement)


State 37

   20 statement: return_statement .

    $default  reduce using rule 20 (statement)


State 38

   47 if_part: _IF _LPAREN . @9 rel_exp $@10 _RPAREN statement

    $default  reduce using rule 45 (@9)

    @9  go to state 51


State 39

   34 exp: _ID .
   40 function_call: _ID . $@8 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 39 ($@8)
    $default  reduce using rule 34 (exp)

    $@8  go to state 52


State 40

   37 literal: _INT_NUMBER .

    $default  reduce using rule 37 (literal)


State 41

   38 literal: _UINT_NUMBER .

    $default  reduce using rule 38 (literal)


State 42

   36 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    num_exp        go to state 53
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46


State 43

   32 num_exp: num_exp . _AROP exp
   49 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 54
    _AROP       shift, and go to state 55


State 44

   31 num_exp: exp .

    $default  reduce using rule 31 (num_exp)


State 45

   33 exp: literal .

    $default  reduce using rule 33 (exp)


State 46

   35 exp: function_call .

    $default  reduce using rule 35 (exp)


State 47

   30 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    num_exp        go to state 56
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46


State 48

   16 statement_list: statement_list . statement
   22 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _RBRACKET  shift, and go to state 57
    _FOR       shift, and go to state 30

    statement             go to state 31
    compound_statement    go to state 32
    for_statement         go to state 33
    assignment_statement  go to state 34
    if_statement          go to state 35
    if_part               go to state 36
    return_statement      go to state 37


State 49

   27 for_statement: _FOR _LPAREN . @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement

    $default  reduce using rule 23 (@4)

    @4  go to state 58


State 50

   44 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _FOR       shift, and go to state 30

    statement             go to state 59
    compound_statement    go to state 32
    for_statement         go to state 33
    assignment_statement  go to state 34
    if_statement          go to state 35
    if_part               go to state 36
    return_statement      go to state 37


State 51

   47 if_part: _IF _LPAREN @9 . rel_exp $@10 _RPAREN statement

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    num_exp        go to state 60
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    rel_exp        go to state 61


State 52

   40 function_call: _ID $@8 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 62


State 53

   32 num_exp: num_exp . _AROP exp
   36 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 63
    _AROP    shift, and go to state 55


State 54

   49 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 49 (return_statement)


State 55

   32 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    exp            go to state 64
    literal        go to state 45
    function_call  go to state 46


State 56

   30 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   32 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 65
    _AROP       shift, and go to state 55


State 57

   22 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 22 (compound_statement)


State 58

   27 for_statement: _FOR _LPAREN @4 . _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement

    _ID  shift, and go to state 66


State 59

   44 if_statement: if_part _ELSE statement .

    $default  reduce using rule 44 (if_statement)


State 60

   32 num_exp: num_exp . _AROP exp
   48 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 55
    _RELOP  shift, and go to state 67


State 61

   47 if_part: _IF _LPAREN @9 rel_exp . $@10 _RPAREN statement

    $default  reduce using rule 46 ($@10)

    $@10  go to state 68


State 62

   40 function_call: _ID $@8 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    $default  reduce using rule 41 (argument)

    num_exp        go to state 69
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    argument       go to state 70


State 63

   36 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 36 (exp)


State 64

   32 num_exp: num_exp _AROP exp .

    $default  reduce using rule 32 (num_exp)


State 65

   30 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 30 (assignment_statement)


State 66

   27 for_statement: _FOR _LPAREN @4 _ID . $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement

    $default  reduce using rule 24 ($@5)

    $@5  go to state 71


State 67

   48 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 39
    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41
    _LPAREN       shift, and go to state 42

    num_exp        go to state 72
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46


State 68

   47 if_part: _IF _LPAREN @9 rel_exp $@10 . _RPAREN statement

    _RPAREN  shift, and go to state 73


State 69

   32 num_exp: num_exp . _AROP exp
   42 argument: num_exp .

    _AROP  shift, and go to state 55

    $default  reduce using rule 42 (argument)


State 70

   40 function_call: _ID $@8 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 74


State 71

   27 for_statement: _FOR _LPAREN @4 _ID $@5 . _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement

    _ASSIGN  shift, and go to state 75


State 72

   32 num_exp: num_exp . _AROP exp
   48 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 55

    $default  reduce using rule 48 (rel_exp)


State 73

   47 if_part: _IF _LPAREN @9 rel_exp $@10 _RPAREN . statement

    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _FOR       shift, and go to state 30

    statement             go to state 76
    compound_statement    go to state 32
    for_statement         go to state 33
    assignment_statement  go to state 34
    if_statement          go to state 35
    if_part               go to state 36
    return_statement      go to state 37


State 74

   40 function_call: _ID $@8 _LPAREN argument _RPAREN .

    $default  reduce using rule 40 (function_call)


State 75

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN . literal $@6 _TO literal $@7 steping _RPAREN statement

    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41

    literal  go to state 77


State 76

   47 if_part: _IF _LPAREN @9 rel_exp $@10 _RPAREN statement .

    $default  reduce using rule 47 (if_part)


State 77

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal . $@6 _TO literal $@7 steping _RPAREN statement

    $default  reduce using rule 25 ($@6)

    $@6  go to state 78


State 78

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 . _TO literal $@7 steping _RPAREN statement

    _TO  shift, and go to state 79


State 79

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO . literal $@7 steping _RPAREN statement

    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41

    literal  go to state 80


State 80

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal . $@7 steping _RPAREN statement

    $default  reduce using rule 26 ($@7)

    $@7  go to state 81


State 81

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 . steping _RPAREN statement

    _STEP  shift, and go to state 82

    $default  reduce using rule 28 (steping)

    steping  go to state 83


State 82

   29 steping: _STEP . literal

    _INT_NUMBER   shift, and go to state 40
    _UINT_NUMBER  shift, and go to state 41

    literal  go to state 84


State 83

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping . _RPAREN statement

    _RPAREN  shift, and go to state 85


State 84

   29 steping: _STEP literal .

    $default  reduce using rule 29 (steping)


State 85

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN . statement

    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _FOR       shift, and go to state 30

    statement             go to state 86
    compound_statement    go to state 32
    for_statement         go to state 33
    assignment_statement  go to state 34
    if_statement          go to state 35
    if_part               go to state 36
    return_statement      go to state 37


State 86

   27 for_statement: _FOR _LPAREN @4 _ID $@5 _ASSIGN literal $@6 _TO literal $@7 steping _RPAREN statement .

    $default  reduce using rule 27 (for_statement)
