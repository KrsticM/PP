Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 $@2: %empty

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body

    7 type: _TYPE

    8 parameter: %empty
    9          | type _ID

   10 $@3: %empty

   11 body: _LBRACKET $@3 variable_list statement_list _RBRACKET

   12 variable_list: %empty
   13              | variable_list variable

   14 variable: type _ID _SEMICOLON

   15 statement_list: %empty
   16               | statement_list statement

   17 statement: compound_statement
   18          | assignment_statement
   19          | if_statement
   20          | return_statement
   21          | for_statement

   22 $@4: %empty

   23 compound_statement: _LBRACKET $@4 variable_list statement_list _RBRACKET

   24 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   25 num_exp: exp
   26        | num_exp _AROP exp

   27 exp: literal
   28    | _ID
   29    | function_call
   30    | _LPAREN num_exp _RPAREN

   31 literal: _INT_NUMBER
   32        | _UINT_NUMBER

   33 $@5: %empty

   34 function_call: _ID $@5 _LPAREN argument _RPAREN

   35 argument: %empty
   36         | num_exp

   37 $@6: %empty

   38 $@7: %empty

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

   40 if_statement: if_part
   41             | if_part _ELSE statement

   42 if_part: _IF _LPAREN rel_exp _RPAREN statement

   43 rel_exp: num_exp _RELOP num_exp

   44 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 7
_FOR (259) 39
_INC (260) 39
_IF (261) 42
_ELSE (262) 41
_RETURN (263) 44
_ID (264) 6 9 14 24 28 34 39
_INT_NUMBER (265) 31
_UINT_NUMBER (266) 32
_LPAREN (267) 6 30 34 39 42
_RPAREN (268) 6 30 34 39 42
_LBRACKET (269) 11 23
_RBRACKET (270) 11 23
_ASSIGN (271) 24 39
_SEMICOLON (272) 14 24 39 44
_AROP (273) 26
_RELOP (274) 43
ONLY_IF (275)


Nonterminals, with rules where they appear

$accept (21)
    on left: 0
program (22)
    on left: 1, on right: 0
function_list (23)
    on left: 2 3, on right: 1 3
function (24)
    on left: 6, on right: 2 3
$@1 (25)
    on left: 4, on right: 6
$@2 (26)
    on left: 5, on right: 6
type (27)
    on left: 7, on right: 6 9 14 39
parameter (28)
    on left: 8 9, on right: 6
body (29)
    on left: 11, on right: 6
$@3 (30)
    on left: 10, on right: 11
variable_list (31)
    on left: 12 13, on right: 11 13 23
variable (32)
    on left: 14, on right: 13
statement_list (33)
    on left: 15 16, on right: 11 16 23
statement (34)
    on left: 17 18 19 20 21, on right: 16 39 41 42
compound_statement (35)
    on left: 23, on right: 17
$@4 (36)
    on left: 22, on right: 23
assignment_statement (37)
    on left: 24, on right: 18
num_exp (38)
    on left: 25 26, on right: 24 26 30 36 43 44
exp (39)
    on left: 27 28 29 30, on right: 25 26
literal (40)
    on left: 31 32, on right: 27 39
function_call (41)
    on left: 34, on right: 29
$@5 (42)
    on left: 33, on right: 34
argument (43)
    on left: 35 36, on right: 34
for_statement (44)
    on left: 39, on right: 21
$@6 (45)
    on left: 37, on right: 39
$@7 (46)
    on left: 38, on right: 39
if_statement (47)
    on left: 40 41, on right: 19
if_part (48)
    on left: 42, on right: 40 41
rel_exp (49)
    on left: 43, on right: 39 42
return_statement (50)
    on left: 44, on right: 20


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4
    type           go to state 5


State 1

    7 type: _TYPE .

    $default  reduce using rule 7 (type)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7
    type      go to state 5


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    6 function: type . _ID $@1 _LPAREN parameter _RPAREN $@2 body

    _ID  shift, and go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    6 function: type _ID . $@1 _LPAREN parameter _RPAREN $@2 body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 9


State 9

    6 function: type _ID $@1 . _LPAREN parameter _RPAREN $@2 body

    _LPAREN  shift, and go to state 10


State 10

    6 function: type _ID $@1 _LPAREN . parameter _RPAREN $@2 body

    _TYPE  shift, and go to state 1

    $default  reduce using rule 8 (parameter)

    type       go to state 11
    parameter  go to state 12


State 11

    9 parameter: type . _ID

    _ID  shift, and go to state 13


State 12

    6 function: type _ID $@1 _LPAREN parameter . _RPAREN $@2 body

    _RPAREN  shift, and go to state 14


State 13

    9 parameter: type _ID .

    $default  reduce using rule 9 (parameter)


State 14

    6 function: type _ID $@1 _LPAREN parameter _RPAREN . $@2 body

    $default  reduce using rule 5 ($@2)

    $@2  go to state 15


State 15

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 . body

    _LBRACKET  shift, and go to state 16

    body  go to state 17


State 16

   11 body: _LBRACKET . $@3 variable_list statement_list _RBRACKET

    $default  reduce using rule 10 ($@3)

    $@3  go to state 18


State 17

    6 function: type _ID $@1 _LPAREN parameter _RPAREN $@2 body .

    $default  reduce using rule 6 (function)


State 18

   11 body: _LBRACKET $@3 . variable_list statement_list _RBRACKET

    $default  reduce using rule 12 (variable_list)

    variable_list  go to state 19


State 19

   11 body: _LBRACKET $@3 variable_list . statement_list _RBRACKET
   13 variable_list: variable_list . variable

    _TYPE  shift, and go to state 1

    $default  reduce using rule 15 (statement_list)

    type            go to state 20
    variable        go to state 21
    statement_list  go to state 22


State 20

   14 variable: type . _ID _SEMICOLON

    _ID  shift, and go to state 23


State 21

   13 variable_list: variable_list variable .

    $default  reduce using rule 13 (variable_list)


State 22

   11 body: _LBRACKET $@3 variable_list statement_list . _RBRACKET
   16 statement_list: statement_list . statement

    _FOR       shift, and go to state 24
    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _RBRACKET  shift, and go to state 29

    statement             go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    for_statement         go to state 33
    if_statement          go to state 34
    if_part               go to state 35
    return_statement      go to state 36


State 23

   14 variable: type _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 37


State 24

   39 for_statement: _FOR . _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _LPAREN  shift, and go to state 38


State 25

   42 if_part: _IF . _LPAREN rel_exp _RPAREN statement

    _LPAREN  shift, and go to state 39


State 26

   44 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    num_exp        go to state 44
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47


State 27

   24 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 48


State 28

   23 compound_statement: _LBRACKET . $@4 variable_list statement_list _RBRACKET

    $default  reduce using rule 22 ($@4)

    $@4  go to state 49


State 29

   11 body: _LBRACKET $@3 variable_list statement_list _RBRACKET .

    $default  reduce using rule 11 (body)


State 30

   16 statement_list: statement_list statement .

    $default  reduce using rule 16 (statement_list)


State 31

   17 statement: compound_statement .

    $default  reduce using rule 17 (statement)


State 32

   18 statement: assignment_statement .

    $default  reduce using rule 18 (statement)


State 33

   21 statement: for_statement .

    $default  reduce using rule 21 (statement)


State 34

   19 statement: if_statement .

    $default  reduce using rule 19 (statement)


State 35

   40 if_statement: if_part .
   41             | if_part . _ELSE statement

    _ELSE  shift, and go to state 50

    $default  reduce using rule 40 (if_statement)


State 36

   20 statement: return_statement .

    $default  reduce using rule 20 (statement)


State 37

   14 variable: type _ID _SEMICOLON .

    $default  reduce using rule 14 (variable)


State 38

   39 for_statement: _FOR _LPAREN . type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _TYPE  shift, and go to state 1

    type  go to state 51


State 39

   42 if_part: _IF _LPAREN . rel_exp _RPAREN statement

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    num_exp        go to state 52
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47
    rel_exp        go to state 53


State 40

   28 exp: _ID .
   34 function_call: _ID . $@5 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 33 ($@5)
    $default  reduce using rule 28 (exp)

    $@5  go to state 54


State 41

   31 literal: _INT_NUMBER .

    $default  reduce using rule 31 (literal)


State 42

   32 literal: _UINT_NUMBER .

    $default  reduce using rule 32 (literal)


State 43

   30 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    num_exp        go to state 55
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47


State 44

   26 num_exp: num_exp . _AROP exp
   44 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 56
    _AROP       shift, and go to state 57


State 45

   25 num_exp: exp .

    $default  reduce using rule 25 (num_exp)


State 46

   27 exp: literal .

    $default  reduce using rule 27 (exp)


State 47

   29 exp: function_call .

    $default  reduce using rule 29 (exp)


State 48

   24 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    num_exp        go to state 58
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47


State 49

   23 compound_statement: _LBRACKET $@4 . variable_list statement_list _RBRACKET

    $default  reduce using rule 12 (variable_list)

    variable_list  go to state 59


State 50

   41 if_statement: if_part _ELSE . statement

    _FOR       shift, and go to state 24
    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28

    statement             go to state 60
    compound_statement    go to state 31
    assignment_statement  go to state 32
    for_statement         go to state 33
    if_statement          go to state 34
    if_part               go to state 35
    return_statement      go to state 36


State 51

   39 for_statement: _FOR _LPAREN type . _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _ID  shift, and go to state 61


State 52

   26 num_exp: num_exp . _AROP exp
   43 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 57
    _RELOP  shift, and go to state 62


State 53

   42 if_part: _IF _LPAREN rel_exp . _RPAREN statement

    _RPAREN  shift, and go to state 63


State 54

   34 function_call: _ID $@5 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 64


State 55

   26 num_exp: num_exp . _AROP exp
   30 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 65
    _AROP    shift, and go to state 57


State 56

   44 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 44 (return_statement)


State 57

   26 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    exp            go to state 66
    literal        go to state 46
    function_call  go to state 47


State 58

   24 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   26 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 67
    _AROP       shift, and go to state 57


State 59

   13 variable_list: variable_list . variable
   23 compound_statement: _LBRACKET $@4 variable_list . statement_list _RBRACKET

    _TYPE  shift, and go to state 1

    $default  reduce using rule 15 (statement_list)

    type            go to state 20
    variable        go to state 21
    statement_list  go to state 68


State 60

   41 if_statement: if_part _ELSE statement .

    $default  reduce using rule 41 (if_statement)


State 61

   39 for_statement: _FOR _LPAREN type _ID . _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _ASSIGN  shift, and go to state 69


State 62

   43 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    num_exp        go to state 70
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47


State 63

   42 if_part: _IF _LPAREN rel_exp _RPAREN . statement

    _FOR       shift, and go to state 24
    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28

    statement             go to state 71
    compound_statement    go to state 31
    assignment_statement  go to state 32
    for_statement         go to state 33
    if_statement          go to state 34
    if_part               go to state 35
    return_statement      go to state 36


State 64

   34 function_call: _ID $@5 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    $default  reduce using rule 35 (argument)

    num_exp        go to state 72
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47
    argument       go to state 73


State 65

   30 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 30 (exp)


State 66

   26 num_exp: num_exp _AROP exp .

    $default  reduce using rule 26 (num_exp)


State 67

   24 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 24 (assignment_statement)


State 68

   16 statement_list: statement_list . statement
   23 compound_statement: _LBRACKET $@4 variable_list statement_list . _RBRACKET

    _FOR       shift, and go to state 24
    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28
    _RBRACKET  shift, and go to state 74

    statement             go to state 30
    compound_statement    go to state 31
    assignment_statement  go to state 32
    for_statement         go to state 33
    if_statement          go to state 34
    if_part               go to state 35
    return_statement      go to state 36


State 69

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN . literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42

    literal  go to state 75


State 70

   26 num_exp: num_exp . _AROP exp
   43 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 57

    $default  reduce using rule 43 (rel_exp)


State 71

   42 if_part: _IF _LPAREN rel_exp _RPAREN statement .

    $default  reduce using rule 42 (if_part)


State 72

   26 num_exp: num_exp . _AROP exp
   36 argument: num_exp .

    _AROP  shift, and go to state 57

    $default  reduce using rule 36 (argument)


State 73

   34 function_call: _ID $@5 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 76


State 74

   23 compound_statement: _LBRACKET $@4 variable_list statement_list _RBRACKET .

    $default  reduce using rule 23 (compound_statement)


State 75

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal . _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _SEMICOLON  shift, and go to state 77


State 76

   34 function_call: _ID $@5 _LPAREN argument _RPAREN .

    $default  reduce using rule 34 (function_call)


State 77

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON . $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    $default  reduce using rule 37 ($@6)

    $@6  go to state 78


State 78

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 . rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement

    _ID           shift, and go to state 40
    _INT_NUMBER   shift, and go to state 41
    _UINT_NUMBER  shift, and go to state 42
    _LPAREN       shift, and go to state 43

    num_exp        go to state 52
    exp            go to state 45
    literal        go to state 46
    function_call  go to state 47
    rel_exp        go to state 79


State 79

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp . _SEMICOLON _ID $@7 _INC _RPAREN statement

    _SEMICOLON  shift, and go to state 80


State 80

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON . _ID $@7 _INC _RPAREN statement

    _ID  shift, and go to state 81


State 81

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID . $@7 _INC _RPAREN statement

    $default  reduce using rule 38 ($@7)

    $@7  go to state 82


State 82

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 . _INC _RPAREN statement

    _INC  shift, and go to state 83


State 83

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC . _RPAREN statement

    _RPAREN  shift, and go to state 84


State 84

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN . statement

    _FOR       shift, and go to state 24
    _IF        shift, and go to state 25
    _RETURN    shift, and go to state 26
    _ID        shift, and go to state 27
    _LBRACKET  shift, and go to state 28

    statement             go to state 85
    compound_statement    go to state 31
    assignment_statement  go to state 32
    for_statement         go to state 33
    if_statement          go to state 34
    if_part               go to state 35
    return_statement      go to state 36


State 85

   39 for_statement: _FOR _LPAREN type _ID _ASSIGN literal _SEMICOLON $@6 rel_exp _SEMICOLON _ID $@7 _INC _RPAREN statement .

    $default  reduce using rule 39 (for_statement)
